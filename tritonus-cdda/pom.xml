<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.tritonus</groupId>
    <artifactId>tritonus</artifactId>
    <version>0.3.12-SNAPSHOT</version>
  </parent>

  <artifactId>tritonus-cdda</artifactId>
  <packaging>jar</packaging>

  <name>Tritonus CDDA Module</name>

  <profiles>
    <profile>
      <id>linux (not on jitpack)</id>
      <activation>
        <property>
          <name>env.JITPACK</name>
          <value>!true</value>
        </property>
        <os>
          <family>unix</family>
          <name>Linux</name>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>native-maven-plugin</artifactId>
            <version>1.0-alpha-11</version>
            <extensions>true</extensions>
            <configuration>
              <javahSearchJNIFromDependencies>false</javahSearchJNIFromDependencies>
              <javahOS>linux</javahOS>
              <compilerProvider>generic-classic</compilerProvider>
              <compilerStartOptions>
                <compilerStartOption>-g -Wall -O2 -fomit-frame-pointer -fPIC</compilerStartOption>
                <!-- unless locating jdk includes, cause error why??? -->
                <compilerStartOption>
                  -I${java.home}/../include
                  -I${java.home}/../include/darwin
                </compilerStartOption>
              </compilerStartOptions>
              <linkerFinalName/>
            </configuration>
            <executions>
              <execution>
                <id>compile-cdparanoia</id>
                <phase>compile</phase>
                <goals>
                  <goal>javah</goal>
                  <goal>compile</goal>
                  <goal>link</goal>
                </goals>
                <configuration>
                  <javahClassNames>
                    <javahClassName>org.tritonus.lowlevel.cdda.cdparanoia.Cdparanoia</javahClassName>
                  </javahClassNames>
                  <sources>
                    <source>
                      <directory>src/main/native/cdparanoia</directory>
                      <fileNames>
                        <fileName>org_tritonus_lowlevel_cdda_cdparanoia_Cdparanoia.c</fileName>
                      </fileNames>
                    </source>
                  </sources>
                  <linkerStartOptions>
                    <linkerStartOption>-dynamiclib
                      -L/usr/local/lib -lcdda_interface -lcdda_paranoia
                    </linkerStartOption>
                  </linkerStartOptions>
                  <linkerEndOptions>
                    <linkerEndOption>-o ${project.build.directory}/libtritonuscdparanoia.so</linkerEndOption>
                  </linkerEndOptions>
                </configuration>
              </execution>
              <execution>
                <id>compile-cooked_ioctl</id>
                <phase>compile</phase>
                <goals>
                  <goal>javah</goal>
                  <goal>compile</goal>
                  <goal>link</goal>
                </goals>
                <configuration>
                  <javahClassNames>
                    <javahClassName>org.tritonus.lowlevel.cdda.cooked_ioctl.CookedIoctl</javahClassName>
                  </javahClassNames>
                  <sources>
                    <source>
                      <directory>src/main/native/cooked_ioctl</directory>
                      <fileNames>
                        <fileName>org_tritonus_lowlevel_cdda_cooked_ioctl_CookedIoctl.cc</fileName>
                      </fileNames>
                    </source>
                  </sources>
                  <linkerStartOptions>
                    <linkerStartOption>-dynamiclib
                      -L/usr/local/lib
                    </linkerStartOption>
                  </linkerStartOptions>
                  <linkerEndOptions>
                    <linkerEndOption>-o ${project.build.directory}/libtritonuscooked_ioctl.so</linkerEndOption>
                  </linkerEndOptions>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>3.0.0-M7</version>
            <configuration>
              <forkMode>once</forkMode>
              <argLine>-Djava.library.path=${project.build.directory}</argLine>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>mac</id>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>3.0.0-M7</version>
            <configuration>
              <skipTests>true</skipTests>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.10.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>org.tritonus</groupId>
      <artifactId>tritonus-share</artifactId>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
